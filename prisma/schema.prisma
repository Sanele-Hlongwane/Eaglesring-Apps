generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_URL")
}

enum Role {
  ENTREPRENEUR
  INVESTOR
}

enum NotificationStatus {
  ENABLED
  DISABLED
}

model Notification {
  id             Int                  @id @default(autoincrement())
  content        String
  userId         Int
  read           Boolean              @default(false)
  user           User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  status         NotificationStatus   @default(ENABLED)
  User           User[]               @relation("UserNotifications")
}

enum MessageStatus {
  SENT
  RECEIVED
  READ
}

enum Stage {
  IDEA
  VALIDATION
  MVP
  GROWTH
  SCALING
  EXIT
}

model Conversation {
  id         Int       @id @default(autoincrement())
  participants User[]  @relation("ConversationParticipants")
  messages    Message[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Message {
  id                Int           @id @default(autoincrement())
  content           String
  senderId         Int
  conversationId    Int
  receiverId        Int
  sender           User          @relation("MessageSender", fields: [senderId], references: [id])
  receiver         User          @relation("MessageReceiver", fields: [receiverId], references: [id])
  status           MessageStatus @default(SENT)
  sentAt           DateTime      @default(now())
  receivedAt       DateTime?
  readAt           DateTime?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  conversation     Conversation  @relation(fields: [conversationId], references: [id])
}


model User {
  id                     Int                  @id @default(autoincrement())
  clerkId                String               @unique
  email                  String               @unique
  name                   String?
  imageUrl               String?
  role                   Role
  stripeCustomerId       String? 
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  messagesSent           Message[]            @relation("MessageSender")
  messagesReceived       Message[]            @relation("MessageReceiver")
  conversations          Conversation[]        @relation("ConversationParticipants")
  investments            Investment[]
  entrepreneurProfile    EntrepreneurProfile?
  investorProfile        InvestorProfile?
  pitches                Pitch[]
  feedbacks              Feedback[]
  interests              Interest[]
  sentFriendRequests     FriendRequest[]      @relation("SentFriendRequests")
  receivedFriendRequests FriendRequest[]      @relation("ReceivedFriendRequests")
  notifications          Notification[]       @relation("UserNotifications")
  Notification           Notification[]

  blockedUsers           Block[]              @relation("BlockingUser")
  blockedByUsers         Block[]              @relation("BlockedUser")
}

model Block {
  id            Int     @id @default(autoincrement())
  blockerId     Int
  blockedId     Int
  createdAt     DateTime @default(now())

  blocker       User    @relation("BlockingUser", fields: [blockerId], references: [id])
  blocked       User    @relation("BlockedUser", fields: [blockedId], references: [id])

  @@unique([blockerId, blockedId])
}

model Pitch {
  id                      Int                    @id @default(autoincrement())
  title                   String
  description             String
  entrepreneurId          Int
  entrepreneur            EntrepreneurProfile    @relation(fields: [entrepreneurId], references: [id])
  feedbacks               Feedback[]
  interests               Interest[]
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  fundingGoal             Float?
  attachments             String[]
  videoUrl                String?
  investmentOpportunityId Int? // Make sure this field exists
  investmentOpportunity   InvestmentOpportunity? @relation(fields: [investmentOpportunityId], references: [id])

  User User[]
}

model Investment {
  id                      Int                   @id @default(autoincrement())
  amount                  Float
  date                    DateTime              @default(now())
  title                   String
  investorProfileId       Int
  entrepreneurProfileId   Int
  investorProfile         InvestorProfile       @relation(fields: [investorProfileId], references: [id])
  entrepreneurProfile     EntrepreneurProfile   @relation(fields: [entrepreneurProfileId], references: [id])
  investmentOpportunityId Int
  investmentOpportunity   InvestmentOpportunity @relation(fields: [investmentOpportunityId], references: [id])

  User User[]

  InvestmentOpportunity InvestmentOpportunity[] @relation("InvestmentOpportunityInvestments")

  @@unique([investorProfileId, investmentOpportunityId])
}

model InvestmentOpportunity {
  id                    Int                 @id @default(autoincrement())
  title                 String
  description           String?
  amount                Float?
  entrepreneurProfileId Int
  entrepreneurProfile   EntrepreneurProfile @relation(fields: [entrepreneurProfileId], references: [id])
  investments           Investment[]        @relation("InvestmentOpportunityInvestments")

  Pitch Pitch[] // This relationship allows multiple pitches to reference the investment opportunity

  Investment Investment[]
}

model EntrepreneurProfile {
  id                      Int                     @id @default(autoincrement())
  userId                  Int                     @unique
  user                    User                    @relation(fields: [userId], references: [id])
  bio                     String?
  company                 String?
  businessStage           String?
  fundingHistory          String?
  linkedinUrl             String?
  imageUrl                String? // Field for storing image URL
  pitches                 Pitch[] // Pitches submitted by the entrepreneur
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  investments             Investment[]
  revenue                 Float? // Added revenue field
  investmentOpportunities InvestmentOpportunity[] // Added field for investment opportunities
}

model FriendRequest {
  id            Int                 @id @default(autoincrement())
  senderId      Int
  receiverId    Int
  sender        User                @relation("SentFriendRequests", fields: [senderId], references: [id])
  receiver      User                @relation("ReceivedFriendRequests", fields: [receiverId], references: [id])
  status        FriendRequestStatus @default(PENDING)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  @@unique([senderId, receiverId])
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model InvestorProfile {
  id                        Int          @id @default(autoincrement())
  userId                    Int          @unique
  user                      User         @relation(fields: [userId], references: [id])
  bio                     String?
  imageUrl                  String?
  investmentStrategy        String?
  linkedinUrl               String?
  preferredIndustries       String[] // New field for preferred industries
  riskTolerance             String? // New field for risk tolerance (e.g., low, medium, high)
  investmentAmountRange     Float[] // New field for acceptable investment amount range
  investments               Investment[] // Investments made by the investor
  feedbacks                 Feedback[] // Feedback given by the investor
  createdAt                 DateTime     @default(now())
  updatedAt                 DateTime     @updatedAt
}

model Feedback {
  id         Int             @id @default(autoincrement())
  content    String
  investorId Int
  pitchId    Int
  investor   InvestorProfile @relation(fields: [investorId], references: [id])
  pitch      Pitch           @relation(fields: [pitchId], references: [id])
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  User User[]
}

model Interest {
  id        Int      @id @default(autoincrement())
  userId    Int
  pitchId   Int
  user      User     @relation(fields: [userId], references: [id])
  pitch     Pitch    @relation(fields: [pitchId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
